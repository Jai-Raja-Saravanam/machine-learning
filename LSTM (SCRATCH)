%{
    ### MATLAB
    WELCOME BACK FOLKS.....
    THIS IS JAI RAJA SARAVANAM ....
    IN THIS PIECE OF CODE I HAVE MADE A LSTM NETWORK FROM SCRATCH WITHOUT USING INBUILT LIBRARY FUNCTION

%}

%% I HAVE MADE A FUNCTION FOR SIGMOID ACTIVATION FUNCTION

function y = sigmoid(x)
    y = 1 ./ (1 + exp(-x));
end

%% I HAVE MADE SYNTHETIC INPUT (SINE WAVE)
SAMPLE_TIME =100 ;
t = 0:1/SAMPLE_TIME:1; % Time vector from 0 to duration
N_time_instance= size(t,2); %101
input = t' ;
y = sin(2 * pi * 5 * t);
target = y' ;

% Plot the sine wave
figure;
plot(y);
title('Sine Wave');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

N_feature = 1 + 1 ; % input +bias
N_output = 1 ;

total_output = zeros(N_time_instance,N_output) ;
unit = 10 ;
neuron = 10 ; % neuron should be equal to unit of hidden state  
% two unit - unit*1 dimension of hidden state and cell state


prev_cell_state = zeros(1,unit)' ; 
prev_hidden_state = zeros(1,unit)' ;

%{
wf = randi([-1 1 ], [unit , N_feature+unit]) ;
wi = randi([-1 1 ], [unit , N_feature+unit]) ;
wc = randi([-1 1 ], [unit , N_feature+unit]) ;
wo = randi([-1 1 ], [unit , N_feature+unit]) ;
wy = randi([-1 1 ], [N_output , unit ]) ;
%}
wf = randn(unit  , N_feature+unit)*0.1 ;
wi = randn(unit , N_feature+unit)*0.1 ;
wc = randn(unit , N_feature+unit)*0.1 ;
wo = randn(unit , N_feature+unit)*0.1 ;
wy = randn(N_output , unit)*0.1 ;

% bwf = randn(unit , 1)*0.1 ;
% bwi = randn(unit , 1)*0.1 ;
% bwc = randn(unit , 1)*0.1 ;
% bwo = randn(unit , 1)*0.1 ;
% bwy = randn(N_output , 1 )*0.1 ;

iteration = 30000 ;
total_loss = zeros(iteration,1) ;
for j =1:iteration
for i = 1:N_time_instance

in= input(i,:) ;
network_input = [prev_hidden_state'  in 1 ]' ;



forget_gate = wf * network_input  ;
o_forget_gate = sigmoid(forget_gate) ;

input_gate =  wi   *  network_input  ;
o_input_gate = sigmoid(input_gate) ;

canditate_gate = wc  *  network_input ;
o_canditate_gate = tanh(canditate_gate) ;

output_gate =  wo   *  network_input  ;
o_output_gate = sigmoid(output_gate) ;

cell_state = prev_cell_state .* o_forget_gate + (o_input_gate .* o_canditate_gate) ;
hidden_state = o_output_gate .* tanh(cell_state) ;

output = wy * hidden_state  ;

total_output(i) = output ;

%back_propagation
alpha =0.4 ;

E = target(i) - output ;

del_wy = E * hidden_state' ; 

del_wo = (o_output_gate .*(1-o_output_gate)).*(wy'*E) .*o_canditate_gate*network_input' ;

del_cs =(wy' * E) .* o_output_gate .* (1-(tanh(cell_state)).^2) ;

del_wf =del_cs.*prev_cell_state.*(o_forget_gate.*(1-o_forget_gate))* network_input' ;

del_wi = del_cs .* o_canditate_gate .*(o_input_gate.*(1-o_input_gate)) * network_input' ;

del_wc = del_cs .* o_input_gate .*(1-(tanh(o_canditate_gate)).^2)* network_input' ;




wf = wf + alpha * del_wf ;
wi = wi + alpha * del_wi ;
wc = wc + alpha * del_wc ;
wo = wo + alpha * del_wo ;
wy = wy + alpha * del_wy ;


prev_hidden_state = hidden_state ;
prev_cell_state = cell_state ;

end

loss = sum((target - total_output).^2)/N_time_instance ;
total_loss(j) = loss ;
if ((loss <0.005) && (loss > -0.005) )
    break ;
end
end 

figure;
plot(total_loss);
title('loss');
xlabel('iteration');
grid on;

figure;
plot(total_output);
title('predicted');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;
